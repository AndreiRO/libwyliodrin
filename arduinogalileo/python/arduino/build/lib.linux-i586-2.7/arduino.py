# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_arduino', [dirname(__file__)])
        except ImportError:
            import _arduino
            return _arduino
        if fp is not None:
            try:
                _mod = imp.load_module('_arduino', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _arduino = swig_import_helper()
    del swig_import_helper
else:
    import _arduino
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def wiringSetup():
  return _arduino.wiringSetup()
wiringSetup = _arduino.wiringSetup

def pinMode(*args):
  return _arduino.pinMode(*args)
pinMode = _arduino.pinMode

def digitalWrite(*args):
  return _arduino.digitalWrite(*args)
digitalWrite = _arduino.digitalWrite

def digitalRead(*args):
  return _arduino.digitalRead(*args)
digitalRead = _arduino.digitalRead

def analogRead(*args):
  return _arduino.analogRead(*args)
analogRead = _arduino.analogRead

def analogWrite(*args):
  return _arduino.analogWrite(*args)
analogWrite = _arduino.analogWrite

def delay(*args):
  return _arduino.delay(*args)
delay = _arduino.delay

def delayMicroseconds(*args):
  return _arduino.delayMicroseconds(*args)
delayMicroseconds = _arduino.delayMicroseconds

def micros():
  return _arduino.micros()
micros = _arduino.micros

def millis():
  return _arduino.millis()
millis = _arduino.millis

def shiftOut(*args):
  return _arduino.shiftOut(*args)
shiftOut = _arduino.shiftOut

def shiftIn(*args):
  return _arduino.shiftIn(*args)
shiftIn = _arduino.shiftIn
# This file is compatible with both classic and new-style classes.


